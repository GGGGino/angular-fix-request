variables:
  DOCKER_DRIVER: overlay2

stages:
  - package
  - deploy

# Package maven artifact, usually also builds docker image
maven package:
  stage: package
  script:
    - echo $CI_JOB_TOKEN | docker login $CI_REGISTRY --username gitlab-ci-token --password-stdin
    - docker build . -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA:0:8}
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA:0:8} ${CI_REGISTRY_IMAGE}:${CI_BUILD_REF_SLUG}-${CI_PIPELINE_ID}
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA:0:8}
    - docker push ${CI_REGISTRY_IMAGE}:${CI_BUILD_REF_SLUG}-${CI_PIPELINE_ID}
    - docker rmi ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA:0:8}
    - docker rmi ${CI_REGISTRY_IMAGE}:${CI_BUILD_REF_SLUG}-${CI_PIPELINE_ID}
  except:
    - tags

# Tag docker image
docker tag:
  stage: package
  script:
    - echo $CI_JOB_TOKEN | docker login $CI_REGISTRY --username gitlab-ci-token --password-stdin
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA:0:8}
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA:0:8} ${CI_REGISTRY_IMAGE}:$CI_BUILD_TAG
    - docker push ${CI_REGISTRY_IMAGE}:$CI_BUILD_TAG
    - docker logout $CI_REGISTRY
    - docker tag ${CI_REGISTRY_IMAGE}:$CI_BUILD_TAG ${PROD_REGISTRY_URL}/$CI_PROJECT_PATH:$CI_BUILD_TAG
    - echo $PROD_REGISTRY_PWD | docker login $PROD_REGISTRY_URL --username $PROD_REGISTRY_USR --password-stdin
    - docker push ${PROD_REGISTRY_URL}/$CI_PROJECT_PATH:$CI_BUILD_TAG
    - docker logout $PROD_REGISTRY_URL
  only:
    - tags

.deploy_to_kubernetes: &deploy_to_kubernetes
  image: alpine
  stage: deploy
  before_script:
    # Install kubectl and config file
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - mkdir -p ~/.kube
    - echo "$KUBE_CONFIG" | tr -d '\r' > ~/.kube/config
  script:
    # Invoke update
    - kubectl set image deployment.v1.apps/$CI_PROJECT_NAME $CI_PROJECT_NAME=${CI_REGISTRY_IMAGE}:$CI_BUILD_REF_SLUG-$CI_PIPELINE_ID --namespace=${K8S_NAMESPACE} --record
    # Wait for rollout to complete
    - kubectl rollout status deployment.v1.apps/$CI_PROJECT_NAME --namespace=${K8S_NAMESPACE}

# Deploy to DEV for feature/* and test/* ONLY manually
deploy feature to develop:
  <<: *deploy_to_kubernetes
  stage: deploy
  environment:
    name: develop
  variables:
    K8S_NAMESPACE: crm-interventi-dev
  when: manual
  only:
    - /^feature\/.*$/

# Deploy to DEV for develop and master AUTOMATICALLY
deploy to develop:
  <<: *deploy_to_kubernetes
  stage: deploy
  environment:
    name: develop
  variables:
    K8S_NAMESPACE: crm-interventi-dev
  only:
    - develop
    - master

# Deploy to TEST for master AUTOMATICALLY
deploy to test:
  <<: *deploy_to_kubernetes
  stage: deploy
  environment:
    name: test
  variables:
    K8S_NAMESPACE: crm-interventi-test
  only:
    - master